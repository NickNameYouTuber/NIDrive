import React, { useState, useEffect } from 'react';
import { 
  DocumentIcon, 
  PhotoIcon, 
  MusicalNoteIcon, 
  FilmIcon, 
  DocumentTextIcon,
  TrashIcon,
  ArrowDownTrayIcon,
  LinkIcon,
  LockClosedIcon,
  GlobeAltIcon,
  EyeIcon,
  EyeSlashIcon
} from '@heroicons/react/24/outline';
import { API_BASE_URL } from '../utils/constants';
import fileApi from '../utils/fileApi';
import { useAuth } from '../contexts/AuthContext';
import { FileMetadata } from '../types/file';

const FilesPage: React.FC = () => {
  const [files, setFiles] = useState<FileMetadata[]>([]);
  const [loading, setLoading] = useState(true);
  const [currentFolder, setCurrentFolder] = useState<string | null>(null);
  const [folderList, setFolderList] = useState<string[]>([]);
  const [copySuccess, setCopySuccess] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const { token } = useAuth();

  useEffect(() => {
    if (token) {
      fetchFiles();
    }
  }, [token]);

  const fetchFiles = async () => {
    try {
      setLoading(true);
      if (!token) return;
      
      // Используем новый fileApi для получения файлов
      const files = await fileApi.getFiles(token, currentFolder || undefined);
      setFiles(files);
      
      // Получаем список папок
      const folders = await fileApi.getFolders(token);
      setFolderList(folders);
    } catch (error) {
      console.error('Error fetching files:', error);
      setError('Ошибка при загрузке списка файлов');
    } finally {
      setLoading(false);
    }
  };

  const deleteFile = async (fileId: string) => {
    if (!confirm('Вы уверены, что хотите удалить этот файл?')) return;
    if (!token) return;

    setIsLoading(true);
    try {
      // Используем новый API для удаления файла
      await fileApi.deleteFile(token, fileId);
      // Обновляем список файлов после удаления
      fetchFiles();
    } catch (err) {
      setError('Ошибка при удалении файла');
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  const toggleFilePrivacy = async (fileId: string, currentPrivacy: boolean) => {
    if (!token) return;
    setIsLoading(true);
    try {
      // Используем новый API для изменения приватности файла
      await fileApi.setFilePrivacy(token, fileId, !currentPrivacy);
      // Обновляем список файлов
      fetchFiles();
    } catch (error: any) {
      console.error('Error toggling privacy:', error);
      setError('Ошибка при изменении статуса приватности файла');
    } finally {
      setIsLoading(false);
    }
  };

  // Функция для копирования ссылки в буфер обмена
  const copyLinkToClipboard = async (file: FileMetadata) => {
    try {
      if (!file.is_public) {
        if (!token) {
          alert('Требуется авторизация для доступа к приватному файлу');
          return;
        }
        
        // Для приватных файлов генерируем временный токен доступа
        const accessResponse = await fileApi.generateFileAccessToken(token, file.id);
        const accessUrl = `${window.location.origin}${API_BASE_URL}/api/files/access/${file.id}?token=${accessResponse.access_token}`;
        
        navigator.clipboard.writeText(accessUrl)
          .then(() => {
            setCopySuccess(file.id);
            setTimeout(() => setCopySuccess(null), 2000);
            alert('Ссылка скопирована! Доступ по этой ссылке временный и не требует авторизации.');
          })
          .catch(err => {
            console.error('Ошибка при копировании ссылки:', err);
            alert('Не удалось скопировать ссылку');
          });
      } else {
        // Для публичных файлов формируем прямую ссылку
        const publicUrl = `${window.location.origin}${API_BASE_URL}/public/${file.id}`;
        
        navigator.clipboard.writeText(publicUrl)
          .then(() => {
            setCopySuccess(file.id);
            setTimeout(() => setCopySuccess(null), 2000);
          })
          .catch(err => {
            console.error('Ошибка при копировании ссылки:', err);
            alert('Не удалось скопировать ссылку');
          });
      }
    } catch (error) {
      console.error('Ошибка при получении токена доступа:', error);
      alert('Не удалось создать ссылку для доступа к файлу');
    }
  };
  
  // Функция для скачивания файлов с авторизацией
  const handleDownload = async (file: FileMetadata) => {
    try {
      let fileBlob: Blob;
      
      if (file.is_public) {
        // Для публичных файлов используем публичный API
        fileBlob = await fileApi.downloadPublicFile(file.id);
      } else {
        if (!token) {
          alert('Требуется авторизация для скачивания приватного файла');
          return;
        }
        // Для приватных файлов используем API с авторизацией
        fileBlob = await fileApi.downloadFile(token, file.id);
      }
      
      // Создаем URL-объект для скачивания
      const url = window.URL.createObjectURL(fileBlob);
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', file.filename);
      document.body.appendChild(link);
      link.click();
      
      // Очищаем URL-объект
      setTimeout(() => {
        window.URL.revokeObjectURL(url);
        document.body.removeChild(link);
      }, 100);
    } catch (error) {
      console.error('Ошибка при скачивании файла:', error);
      alert('Не удалось скачать файл');
    }
  };
  
  // Функция для прямого просмотра файла в браузере
  const handleViewFile = async (file: FileMetadata) => {
    try {
      if (file.is_public) {
        // Для публичных файлов открываем прямую ссылку
        window.open(`${API_BASE_URL}/public/${file.id}`, '_blank');
      } else {
        if (!token) {
          alert('Требуется авторизация для просмотра приватного файла');
          return;
        }
        
        try {
          // Получаем URL для доступа к файлу
          const fileUrl = await fileApi.openFile(token, file);
          window.open(fileUrl, '_blank');
        } catch (error) {
          // Если openFile не работает, скачиваем файл и создаем временную ссылку
          const fileBlob = await fileApi.downloadFile(token, file.id);
          const url = window.URL.createObjectURL(fileBlob);
          window.open(url, '_blank');
          
          // Очищаем URL через некоторое время
          setTimeout(() => {
            window.URL.revokeObjectURL(url);
          }, 1000);
        }
      }
    } catch (error) {
      console.error('Ошибка при открытии файла:', error);
      alert('Не удалось открыть файл');
    }
  };
  
  // Функция для форматирования размера файла
  const formatFileSize = (size: number): string => {
    if (size < 1024) return `${size} B`;
    if (size < 1024 * 1024) return `${(size / 1024).toFixed(1)} KB`;
    if (size < 1024 * 1024 * 1024) return `${(size / (1024 * 1024)).toFixed(1)} MB`;
    return `${(size / (1024 * 1024 * 1024)).toFixed(1)} GB`;
  };
  
  // Функция для получения иконки файла на основе имени файла
  const getFileIcon = (filename: string) => {
    const extension = filename.split('.').pop()?.toLowerCase();
    
    switch (extension) {
      case 'jpg':
      case 'jpeg':
      case 'png':
      case 'gif':
      case 'webp':
        return <PhotoIcon className="h-8 w-8 text-blue-500" />;
      case 'mp3':
      case 'wav':
      case 'ogg':
        return <MusicalNoteIcon className="h-8 w-8 text-purple-500" />;
      case 'mp4':
      case 'webm':
      case 'avi':
      case 'mov':
        return <FilmIcon className="h-8 w-8 text-red-500" />;
      case 'pdf':
        return <DocumentTextIcon className="h-8 w-8 text-red-600" />;
      default:
        return <DocumentIcon className="h-8 w-8 text-gray-500" />;
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary-600"></div>
      </div>
    );
  }
  
  return (
    <div className="container mx-auto p-4">
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-2xl font-bold">Мои файлы</h1>
        <div className="flex space-x-2">
          <button
            onClick={() => window.location.href = '/upload'}
            className="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 flex items-center space-x-1"
          >
            <span>Загрузить</span>
          </button>
        </div>
      </div>

      {/* Folders navigation */}
      {folderList.length > 0 && (
        <div className="mb-4">
          <h2 className="text-lg font-semibold mb-2">Папки</h2>
          <div className="flex flex-wrap gap-2">
            <button
              onClick={() => {
                setCurrentFolder(null);
                fetchFiles();
              }}
              className={`px-3 py-1 rounded-md ${!currentFolder ? 'bg-primary-100 text-primary-700 border-primary-300' : 'bg-gray-100 text-gray-700 border-gray-300'} border`}
            >
              Все файлы
            </button>
            {folderList.map((folder) => (
              <button
                key={folder}
                onClick={() => {
                  setCurrentFolder(folder);
                  fetchFiles();
                }}
                className={`px-3 py-1 rounded-md ${currentFolder === folder ? 'bg-primary-100 text-primary-700 border-primary-300' : 'bg-gray-100 text-gray-700 border-gray-300'} border`}
              >
                {folder}
              </button>
            ))}
          </div>
        </div>
      )}

      {error && (
        <div className="mb-4 p-3 bg-red-100 text-red-700 rounded-md">
          {error}
        </div>
      )}

      {files.length === 0 ? (
        <div className="text-center py-12">
          <DocumentIcon className="h-16 w-16 mx-auto text-gray-400" />
          <h3 className="mt-4 text-lg font-medium text-gray-900">Нет файлов</h3>
          <p className="mt-1 text-sm text-gray-500">Загрузите файлы, чтобы они появились здесь.</p>
          <div className="mt-6">
            <button
              onClick={() => window.location.href = '/upload'}
              className="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700"
            >
              Загрузить файлы
            </button>
          </div>
        </div>
      ) : (
        <div className="overflow-x-auto">
          <table className="min-w-full bg-white dark:bg-gray-800 rounded-lg overflow-hidden shadow-md">
            <thead className="bg-gray-50 dark:bg-gray-700 text-gray-500 dark:text-gray-300">
              <tr>
                <th className="py-3 px-4 text-left font-medium text-sm uppercase tracking-wider">Файл</th>
                <th className="py-3 px-4 text-left font-medium text-sm uppercase tracking-wider">Размер</th>
                <th className="py-3 px-4 text-left font-medium text-sm uppercase tracking-wider">Дата загрузки</th>
                <th className="py-3 px-4 text-left font-medium text-sm uppercase tracking-wider">Статус</th>
                <th className="py-3 px-4 text-right font-medium text-sm uppercase tracking-wider">Действия</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
              {files.map((file) => (
                <tr key={file.id} className="hover:bg-gray-50 dark:hover:bg-gray-700">
                  <td className="py-4 px-4">
                    <div className="flex items-center">
                      {getFileIcon(file.filename)}
                      <div className="ml-3">
                        <p className="text-gray-900 dark:text-gray-100 font-medium truncate max-w-xs">{file.filename}</p>
                        {file.folder && (
                          <p className="text-gray-500 dark:text-gray-400 text-sm">{file.folder}</p>
                        )}
                      </div>
                    </div>
                  </td>
                  <td className="py-4 px-4 text-gray-600 dark:text-gray-300">
                    {formatFileSize(file.size)}
                  </td>
                  <td className="py-4 px-4 text-gray-600 dark:text-gray-300">
                    {new Date(file.created_at).toLocaleDateString()}
                  </td>
                  <td className="py-4 px-4">
                    <span 
                      className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                        file.is_public 
                          ? 'bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100' 
                          : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-800 dark:text-yellow-100'
                      }`}
                    >
                      {file.is_public ? 'Публичный' : 'Приватный'}
                    </span>
                  </td>
                  <td className="py-4 px-4 text-right">
                    <div className="flex justify-end space-x-2">
                      <button
                        onClick={() => handleViewFile(file)}
                        className="text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300"
                        title="Просмотреть"
                      >
                        <EyeIcon className="h-5 w-5" />
                      </button>
                      <button
                        onClick={() => handleDownload(file)}
                        className="text-green-600 hover:text-green-900 dark:text-green-400 dark:hover:text-green-300"
                        title="Скачать"
                      >
                        <ArrowDownTrayIcon className="h-5 w-5" />
                      </button>
                      <button
                        onClick={() => copyLinkToClipboard(file)}
                        className={`${copySuccess === file.id ? 'text-primary-600' : 'text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-300'}`}
                        title="Копировать ссылку"
                      >
                        {copySuccess === file.id ? (
                          <span className="text-xs text-primary-600">Скопировано!</span>
                        ) : (
                          <LinkIcon className="h-5 w-5" />
                        )}
                      </button>
                      <button
                        onClick={() => toggleFilePrivacy(file.id, file.is_public)}
                        className="text-yellow-600 hover:text-yellow-900 dark:text-yellow-400 dark:hover:text-yellow-300"
                        title={file.is_public ? 'Сделать приватным' : 'Сделать публичным'}
                        disabled={isLoading}
                      >
                        {file.is_public ? (
                          <LockClosedIcon className="h-5 w-5" />
                        ) : (
                          <GlobeAltIcon className="h-5 w-5" />
                        )}
                      </button>
                      <button
                        onClick={() => deleteFile(file.id)}
                        className="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300"
                        title="Удалить"
                        disabled={isLoading}
                      >
                        <TrashIcon className="h-5 w-5" />
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
};

export default FilesPage;
