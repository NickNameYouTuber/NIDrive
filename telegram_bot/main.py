import os
import logging
import requests
from typing import Dict, Any, Optional
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from dotenv import load_dotenv
from token_storage import token_storage

load_dotenv()

# Configure logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# Environment variables
BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
API_BASE_URL = os.environ.get("API_BASE_URL", "http://localhost:8000")
WEB_APP_URL = os.environ.get("WEB_APP_URL", "http://localhost:3000")

# Maximum file size (5GB in bytes)
MAX_FILE_SIZE = 5 * 1024 * 1024 * 1024

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a welcome message when the command /start is issued."""
    user = update.effective_user
    logger.info(f"User {user.id} started bot")
    
    # Check if the user is starting with an auth code - –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –≤–µ–±-–≤–µ—Ä—Å–∏–∏
    if context.args and len(context.args) > 0:
        auth_code = context.args[0]
        logger.info(f"User {user.id} started bot with auth code: {auth_code}")
        
        # Process the auth code
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            user_data = {
                "code": auth_code,
                "telegram_id": str(user.id),
                "username": user.username or "",
                "first_name": user.first_name or "",
                "last_name": user.last_name or ""
            }
            
            logger.info(f"Sending user data: {user_data}")
            
            # Process the auth code on the backend - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ JSON –¥–ª—è –±–æ–ª—å—à–µ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            response = requests.post(
                f"{API_BASE_URL}/auth/process-code",
                json=user_data,
                headers={"Content-Type": "application/json"}
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"Auth code process response: {response.status_code} - {response.text}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ URL, –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Å–ø–æ—Å–æ–± –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            if response.status_code != 200:
                logger.info("Trying alternative method with URL parameters")
                url = f"{API_BASE_URL}/auth/process-code?code={auth_code}&telegram_id={user.id}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ URL
                if user.username:
                    url += f"&username={user.username}"
                if user.first_name:
                    url += f"&first_name={user.first_name}"
                if user.last_name:
                    url += f"&last_name={user.last_name}"
                
                logger.info(f"Sending URL request: {url}")
                response = requests.post(url)
            
            if response.status_code == 200:
                await update.message.reply_text(
                    "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç Telegram —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω —Å –≤–µ–±-–≤–µ—Ä—Å–∏–µ–π NIDriveBot."
                    "\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –≤–∞—à–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏."
                )
                # –ü–æ—Å–ª–µ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ –±–æ—Ç–µ
        except Exception as e:
            logger.error(f"Exception when processing auth code: {str(e)}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
                "\n\n–ù–æ –≤—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞."
            )
    
    # –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∫–æ–¥–∞
    user_data = {
        "id": str(user.id),
        "first_name": user.first_name,
        "last_name": user.last_name,
        "username": user.username,
        "auth_date": int(update.message.date.timestamp()),
        "hash": "telegram_bot_auth"  # This is just a placeholder, backend will ignore for bot requests
    }
    
    try:
        response = requests.post(f"{API_BASE_URL}/auth/telegram-login", json=user_data)
        response_data = None
        try:
            if response.status_code == 200:
                token_data = response.json()
                # Store the token in the user's context and in persistent storage
                token = token_data["access_token"]
                context.user_data["token"] = token
                token_storage.set_token(str(user.id), token)
                response_data = token_data
            else:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–¥–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
                logger.warning(f"Failed to authenticate with API, using local bot authentication")
                # –°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
                token = f"local_bot_token_{str(user.id)}_{int(update.message.date.timestamp())}"
                context.user_data["token"] = token
                token_storage.set_token(str(user.id), token)
        except Exception as e:
            logger.error(f"Error parsing response: {e}")
            # –°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
            token = f"local_bot_token_{str(user.id)}_{int(update.message.date.timestamp())}"
            context.user_data["token"] = token
            token_storage.set_token(str(user.id), token)
            
        # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –±—ã–ª–∏ –æ—à–∏–±–∫–∏
        # Create welcome message with inline keyboard
        keyboard = [
            [
                InlineKeyboardButton("üìÇ –ú–æ–∏ —Ñ–∞–π–ª—ã", callback_data="list_files"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
            ],
            [
                InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–≤–µ—Ä—Å–∏—é", url=WEB_APP_URL),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_html(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>NIDriveBot</b> - –≤–∞—à–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–∞–π–ª–æ–≤.\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –ª—é–±–æ–π —Ñ–∞–π–ª, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –≤ –≤–∞—à–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ. "
            f"–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—è –∏–ª–∏ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.",
            reply_markup=reply_markup,
        )
    except Exception as e:
        logger.error(f"Error authenticating user: {e}")
        # –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
        token = f"local_bot_token_{str(user.id)}_{int(update.message.date.timestamp())}"
        context.user_data["token"] = token
        token_storage.set_token(str(user.id), token)
        
        # –í—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        keyboard = [
            [
                InlineKeyboardButton("üìÇ –ú–æ–∏ —Ñ–∞–π–ª—ã", callback_data="list_files"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
            ],
            [
                InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–≤–µ—Ä—Å–∏—é", url=WEB_APP_URL),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_html(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>NIDriveBot</b> - –≤–∞—à–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–∞–π–ª–æ–≤.\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –ª—é–±–æ–π —Ñ–∞–π–ª, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –≤ –≤–∞—à–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ. "
            f"–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—è –∏–ª–∏ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.",
            reply_markup=reply_markup,
        )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a help message when the command /help is issued."""
    help_text = (
        "–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å:\n\n"
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–π —Ñ–∞–π–ª, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –≤ –≤–∞—à–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.\n"
        "üìÇ /files - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ —Ñ–∞–π–ª—ã\n"
        "üìä /stats - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞\n"
        "üîó /link <–∏–º—è_—Ñ–∞–π–ª–∞> - –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª\n"
        "‚ùì /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–£ –≤–∞—Å –µ—Å—Ç—å –¥–æ 5 –ì–ë —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –≤–∞—à–∏—Ö —Ñ–∞–π–ª–æ–≤."
    )
    await update.message.reply_text(help_text)

async def files_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """List user's files when the command /files is issued."""
    await list_files(update, context)

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show storage stats when the command /stats is issued."""
    await show_stats(update, context)

async def list_files(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """List the user's files."""
    user_id = str(update.effective_user.id)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞, –∞ –∑–∞—Ç–µ–º –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    token = token_storage.get_token(user_id) or context.user_data.get("token")
    
    if not token:
        await update_response(update, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        return
    
    try:
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(f"{API_BASE_URL}/files", headers=headers)
        
        if response.status_code == 200:
            files = response.json()
            
            if not files:
                await update_response(update, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
                return
            
            # Group files by folder
            files_by_folder: Dict[Optional[str], list] = {}
            for file in files:
                folder = file.get("folder") or "–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è"
                if folder not in files_by_folder:
                    files_by_folder[folder] = []
                files_by_folder[folder].append(file)
            
            # Create inline keyboard with folders
            keyboard = []
            for folder in files_by_folder:
                keyboard.append([InlineKeyboardButton(
                    f"üìÅ {folder} ({len(files_by_folder[folder])} —Ñ–∞–π–ª–æ–≤)",
                    callback_data=f"folder_{folder}"
                )])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update_response(
                update,
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤:",
                reply_markup=reply_markup
            )
        else:
            await update_response(update, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"Error listing files: {e}")
        await update_response(update, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_folder_files(update: Update, context: ContextTypes.DEFAULT_TYPE, folder: str) -> None:
    """Show files in a specific folder."""
    user_id = str(update.effective_user.id)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞, –∞ –∑–∞—Ç–µ–º –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    token = token_storage.get_token(user_id) or context.user_data.get("token")
    
    if not token:
        await update.callback_query.answer("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    try:
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(f"{API_BASE_URL}/files", headers=headers)
        
        if response.status_code == 200:
            all_files = response.json()
            
            # Filter files by folder
            if folder == "–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è":
                files = [f for f in all_files if not f.get("folder")]
            else:
                files = [f for f in all_files if f.get("folder") == folder]
            
            if not files:
                await update.callback_query.answer("–í —ç—Ç–æ–π –ø–∞–ø–∫–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤")
                return
            
            # Paginate files if there are many
            page_size = 5
            page = context.user_data.get("file_page", 0)
            max_page = (len(files) - 1) // page_size
            
            # Ensure page is within bounds
            page = max(0, min(page, max_page))
            context.user_data["file_page"] = page
            
            start_idx = page * page_size
            end_idx = min(start_idx + page_size, len(files))
            current_files = files[start_idx:end_idx]
            
            # Create message with file list
            message = f"üìÅ <b>{folder}</b> ({len(files)} —Ñ–∞–π–ª–æ–≤):\n\n"
            
            for i, file in enumerate(current_files, start=1):
                size_str = format_size(file["file_size"])
                message += f"{i + start_idx}. {file['filename']} ({size_str})\n"
            
            # Add pagination info
            if max_page > 0:
                message += f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {max_page + 1}"
            
            # Create inline keyboard for file actions
            keyboard = []
            
            # Add file action buttons
            for i, file in enumerate(current_files):
                keyboard.append([
                    InlineKeyboardButton(f"{i + 1}. {file['filename'][:20]}", callback_data=f"file_{file['id']}"),
                ])
            
            # Add pagination buttons
            pagination_row = []
            if page > 0:
                pagination_row.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page-1}_{folder}"))
            
            pagination_row.append(InlineKeyboardButton("üîô –ö –ø–∞–ø–∫–∞–º", callback_data="list_files"))
            
            if page < max_page:
                pagination_row.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"page_{page+1}_{folder}"))
            
            if pagination_row:
                keyboard.append(pagination_row)
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                message,
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
        else:
            await update.callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã")
    except Exception as e:
        logger.error(f"Error showing folder files: {e}")
        await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def show_file_details(update: Update, context: ContextTypes.DEFAULT_TYPE, file_id: str) -> None:
    """Show details and actions for a specific file."""
    user_id = str(update.effective_user.id)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞, –∞ –∑–∞—Ç–µ–º –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    token = token_storage.get_token(user_id) or context.user_data.get("token")
    
    if not token:
        await update.callback_query.answer("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    try:
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(f"{API_BASE_URL}/files/{file_id}", headers=headers)
        
        if response.status_code == 200:
            file = response.json()
            
            # Create message with file details
            size_str = format_size(file["file_size"])
            created_date = file["created_at"].split("T")[0]
            
            message = (
                f"üìÑ <b>{file['filename']}</b>\n\n"
                f"üì¶ –†–∞–∑–º–µ—Ä: {size_str}\n"
                f"üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {created_date}\n"
                f"üìÅ –ü–∞–ø–∫–∞: {file.get('folder') or '–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è'}\n"
            )
            
            # Create inline keyboard for file actions
            keyboard = [
                [
                    InlineKeyboardButton("üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"link_{file_id}"),
                    InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{file_id}"),
                ],
                [
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"folder_{file.get('folder') or '–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è'}"),
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                message,
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
        else:
            await update.callback_query.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"Error showing file details: {e}")
        await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def get_file_link(update: Update, context: ContextTypes.DEFAULT_TYPE, file_id: str) -> None:
    """Get the link to a file."""
    user_id = str(update.effective_user.id)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞, –∞ –∑–∞—Ç–µ–º –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    token = token_storage.get_token(user_id) or context.user_data.get("token")
    
    if not token:
        await update.callback_query.answer("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    try:
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(f"{API_BASE_URL}/files/{file_id}", headers=headers)
        
        if response.status_code == 200:
            file = response.json()
            file_url = f"{WEB_APP_URL}{file['file_url']}"
            
            message = (
                f"üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª:</b>\n"
                f"{file['filename']}\n\n"
                f"<code>{file_url}</code>"
            )
            
            # Create inline keyboard to go back
            keyboard = [
                [
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"file_{file_id}"),
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                message,
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
        else:
            await update.callback_query.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"Error getting file link: {e}")
        await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def delete_file(update: Update, context: ContextTypes.DEFAULT_TYPE, file_id: str) -> None:
    """Delete a file."""
    user_id = str(update.effective_user.id)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞, –∞ –∑–∞—Ç–µ–º –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    token = token_storage.get_token(user_id) or context.user_data.get("token")
    if not token:
        await update.callback_query.answer("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    try:
        headers = {"Authorization": f"Bearer {token}"}
        
        # First get file info to know its folder
        info_response = requests.get(f"{API_BASE_URL}/files/{file_id}", headers=headers)
        
        if info_response.status_code != 200:
            await update.callback_query.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        file_info = info_response.json()
        folder = file_info.get("folder") or "–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è"
        
        # Delete the file
        response = requests.delete(f"{API_BASE_URL}/files/{file_id}", headers=headers)
        
        if response.status_code == 200:
            await update.callback_query.answer("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
            
            # Go back to folder view
            await show_folder_files(update, context, folder)
        else:
            await update.callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª")
    except Exception as e:
        logger.error(f"Error deleting file: {e}")
        await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show storage usage statistics."""
    token = context.user_data.get("token")
    if not token:
        await update_response(update, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        return
    
    try:
        headers = {"Authorization": f"Bearer {token}"}
        
        # Get storage stats
        storage_response = requests.get(f"{API_BASE_URL}/storage/usage", headers=headers)
        
        # Get files for counting
        files_response = requests.get(f"{API_BASE_URL}/files", headers=headers)
        
        if storage_response.status_code == 200 and files_response.status_code == 200:
            storage = storage_response.json()
            files = files_response.json()
            
            # Calculate stats
            used_formatted = format_size(storage["used"])
            total_formatted = format_size(storage["total"])
            percentage = storage["percentage"]
            
            # Count file types
            file_types = {}
            for file in files:
                ext = file["filename"].split(".")[-1].lower() if "." in file["filename"] else "unknown"
                file_types[ext] = file_types.get(ext, 0) + 1
            
            # Create progress bar
            progress_bar = "["
            filled = int(percentage / 10)
            progress_bar += "‚ñ†" * filled
            progress_bar += "‚ñ°" * (10 - filled)
            progress_bar += "]"
            
            # Create message
            message = (
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞</b>\n\n"
                f"üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used_formatted} –∏–∑ {total_formatted}\n"
                f"üìà –ó–∞–ø–æ–ª–Ω–µ–Ω–æ: {percentage:.1f}%\n"
                f"{progress_bar}\n\n"
                f"üìë –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(files)}\n\n"
            )
            
            # Add file type breakdown if there are files
            if file_types:
                message += "<b>–¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤:</b>\n"
                sorted_types = sorted(file_types.items(), key=lambda x: x[1], reverse=True)
                for ext, count in sorted_types[:5]:  # Show top 5 file types
                    message += f"- .{ext}: {count} —Ñ–∞–π–ª–æ–≤\n"
            
            # Create inline keyboard
            keyboard = [
                [
                    InlineKeyboardButton("üìÇ –ú–æ–∏ —Ñ–∞–π–ª—ã", callback_data="list_files"),
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update_response(
                update,
                message,
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
        else:
            await update_response(update, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"Error showing stats: {e}")
        await update_response(update, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle file uploads from users."""
    user = update.effective_user
    token = context.user_data.get("token")
    
    if not token:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
        )
        return
    
    try:
        # Check if it's a document, photo, video, etc.
        file_obj = None
        caption = None
        
        if update.message.document:
            file_obj = update.message.document
            caption = update.message.caption
        elif update.message.photo:
            # Get the largest photo (last in the list)
            file_obj = update.message.photo[-1]
            caption = update.message.caption
        elif update.message.video:
            file_obj = update.message.video
            caption = update.message.caption
        elif update.message.audio:
            file_obj = update.message.audio
            caption = update.message.caption
        elif update.message.voice:
            file_obj = update.message.voice
            caption = update.message.caption
        
        if not file_obj:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
            return
        
        # Check file size
        if file_obj.file_size > MAX_FILE_SIZE:
            await update.message.reply_text(
                f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {format_size(MAX_FILE_SIZE)}."
            )
            return
        
        # Get storage usage to check if there's enough space
        headers = {"Authorization": f"Bearer {token}"}
        storage_response = requests.get(f"{API_BASE_URL}/storage/usage", headers=headers)
        
        if storage_response.status_code == 200:
            storage = storage_response.json()
            remaining_space = storage["total"] - storage["used"]
            
            if file_obj.file_size > remaining_space:
                await update.message.reply_text(
                    "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ. –£–¥–∞–ª–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
                return
        
        # Send a message that we're downloading the file
        status_message = await update.message.reply_text(
            "‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
        )
        
        # Download the file
        file = await context.bot.get_file(file_obj.file_id)
        file_path = await file.download_to_drive()
        
        # Parse folder from caption if provided
        folder = None
        if caption and caption.startswith("folder:"):
            folder = caption.split("folder:")[1].strip()
        
        # Create FormData
        files = {"file": open(file_path, "rb")}
        data = {}
        
        if folder:
            data["folder"] = folder
        
        # Update status message
        await status_message.edit_text("‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –≤ –≤–∞—à–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ...")
        
        # Upload file to API
        upload_response = requests.post(
            f"{API_BASE_URL}/files/upload",
            headers=headers,
            files=files,
            data=data
        )
        
        # Close the file
        files["file"].close()
        
        # Remove local file
        os.remove(file_path)
        
        if upload_response.status_code == 200:
            file_data = upload_response.json()
            file_url = f"{WEB_APP_URL}{file_data['file_url']}"
            
            # Create inline keyboard for file actions
            keyboard = [
                [
                    InlineKeyboardButton("üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"link_{file_data['id']}"),
                ],
                [
                    InlineKeyboardButton("üìÇ –ú–æ–∏ —Ñ–∞–π–ª—ã", callback_data="list_files"),
                ],
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await status_message.edit_text(
                f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!\n\n"
                f"üìÑ <b>{file_data['filename']}</b>\n"
                f"üì¶ –†–∞–∑–º–µ—Ä: {format_size(file_data['file_size'])}\n"
                f"üìÅ –ü–∞–ø–∫–∞: {file_data.get('folder') or '–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è'}\n",
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
        else:
            error_detail = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            try:
                error_detail = upload_response.json().get("detail", error_detail)
            except:
                pass
            
            await status_message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {error_detail}"
            )
    except Exception as e:
        logger.error(f"Error handling file: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle callback queries from inline keyboards."""
    query = update.callback_query
    data = query.data
    
    try:
        if data == "list_files":
            await list_files(update, context)
        elif data == "stats":
            await show_stats(update, context)
        elif data.startswith("folder_"):
            folder = data[7:]
            await show_folder_files(update, context, folder)
        elif data.startswith("file_"):
            file_id = int(data[5:])
            await show_file_details(update, context, file_id)
        elif data.startswith("link_"):
            file_id = int(data[5:])
            await get_file_link(update, context, file_id)
        elif data.startswith("delete_"):
            file_id = int(data[7:])
            await delete_file(update, context, file_id)
        elif data.startswith("page_"):
            parts = data.split("_")
            page = int(parts[1])
            folder = "_".join(parts[2:])
            context.user_data["file_page"] = page
            await show_folder_files(update, context, folder)
        else:
            await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    except Exception as e:
        logger.error(f"Error handling callback: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def update_response(update: Update, text: str, **kwargs) -> None:
    """Helper function to respond to either message or callback query."""
    if update.callback_query:
        await update.callback_query.edit_message_text(text, **kwargs)
    else:
        await update.message.reply_text(text, **kwargs)

def format_size(size_bytes: int) -> str:
    """Format size in bytes to human-readable string."""
    if size_bytes < 1024:
        return f"{size_bytes} B"
    elif size_bytes < 1024 * 1024:
        return f"{size_bytes / 1024:.1f} KB"
    elif size_bytes < 1024 * 1024 * 1024:
        return f"{size_bytes / (1024 * 1024):.1f} MB"
    else:
        return f"{size_bytes / (1024 * 1024 * 1024):.2f} GB"

def main() -> None:
    """Start the bot."""
    # Create application
    application = Application.builder().token(BOT_TOKEN).build()
    
    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("files", files_command))
    application.add_handler(CommandHandler("stats", stats_command))
    
    # Handle documents, photos, videos, etc.
    application.add_handler(MessageHandler(
        filters.Document.ALL | filters.PHOTO | filters.VIDEO | filters.AUDIO | filters.VOICE,
        handle_file
    ))
    
    # Handle callback queries
    application.add_handler(CallbackQueryHandler(handle_callback))
    
    # Start the bot
    application.run_polling()

if __name__ == "__main__":
    main()
